/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.onemillionworlds;

import java.io.File;
import java.io.IOException;
import java.io.Writer;
import java.io.FileWriter;

import org.gradle.testkit.runner.BuildTask;
import org.gradle.testkit.runner.GradleRunner;
import org.gradle.testkit.runner.BuildResult;
import org.gradle.testkit.runner.TaskOutcome;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;
import static org.junit.jupiter.api.Assertions.*;

/**
 * A simple functional test for the 'org.example.greeting' plugin.
 */
class TypedMaterialsPluginFunctionalTest {
    @TempDir
    File projectDir;

    private File getBuildFile() {
        return new File(projectDir, "build.gradle");
    }

    private File getSettingsFile() {
        return new File(projectDir, "settings.gradle");
    }

    private File getGeneratedJavaFilesRoot() {
        return new File(projectDir,  "src/main/generated/java");
    }

    private File getGeneratedJavaFile(String pathRelativeToRoot) {
        return new File(getGeneratedJavaFilesRoot(),  pathRelativeToRoot);
    }

    @Test
    void correctDefaultTasks() throws IOException {
        writeString(getSettingsFile(), "");
        writeString(getBuildFile(),
                """
                    plugins {
                      id('java')
                      id('com.onemillionworlds.typedmaterials')
                    };
                    """);

        // Run the build
        GradleRunner runner = GradleRunner.create();
        runner.forwardOutput();
        runner.withPluginClasspath();
        runner.withArguments("assemble");
        runner.withProjectDir(projectDir);
        BuildResult result = runner.build();

        // Verify the result
        result.getTasks().forEach(task -> System.out.println("Task: " + task));

        BuildTask coreTask = result.task(":coreTypedMaterials");
        assertNotNull(coreTask);
        assertEquals(coreTask.getOutcome(), TaskOutcome.SUCCESS);
        BuildTask effectsTask = result.task(":effectsTypedMaterials");
        assertNotNull(effectsTask);
        assertEquals(effectsTask.getOutcome(), TaskOutcome.SUCCESS);
    }

    @Test
    void correctConfiguredTasks() throws IOException {
        writeString(getSettingsFile(), "");
        writeString(getBuildFile(),
                """
                    plugins {
                      id('java')
                      id('com.onemillionworlds.typedmaterials')
                    };
                    typedMaterials{
                      configurations {
                        alternate {
                          outputPackage = 'com.onemillionworlds.core.materials'
                          jarFilterRegex = '.*core.*'
                        }
                      }
                    }
                    
                    """);

        // Run the build
        GradleRunner runner = GradleRunner.create();
        runner.forwardOutput();
        runner.withPluginClasspath();
        runner.withArguments("assemble");
        runner.withProjectDir(projectDir);
        BuildResult result = runner.build();

        BuildTask alternateTask = result.task(":alternateTypedMaterials");
        assertNotNull(alternateTask);
    }

    @Test
    void outputsProcessedFilesFromJMEMaterials() throws IOException {
        writeString(getSettingsFile(), "");
        writeString(getBuildFile(),
                """
                    plugins {
                      id('java')
                      id('com.onemillionworlds.typedmaterials')
                    };
                    dependencies {
                         implementation 'org.jmonkeyengine:jme3-core:3.6.1-stable'
                    }
                    
                    """);

        // Run the build
        GradleRunner runner = GradleRunner.create();
        runner.forwardOutput();
        runner.withPluginClasspath();
        runner.withArguments("assemble");
        runner.withProjectDir(projectDir);
        BuildResult result = runner.build();

        BuildTask alternateTask = result.task(":alternateTypedMaterials");
        assertNotNull(alternateTask);
    }

    private void writeString(File file, String string) throws IOException {
        try (Writer writer = new FileWriter(file)) {
            writer.write(string);
        }
    }
}
