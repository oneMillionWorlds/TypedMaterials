package com.onemillionworlds.utilities;

import java.util.List;

public class FactoryBuilder{

    private static final String classTemplate = """
                                     package [PACKAGE];
                                     
                                     import com.jme3.asset.AssetManager;
                                     import com.jme3.material.Material;
                                     import java.util.HashMap;
                                     import java.util.Map;
                                     import java.util.function.Function;
                                     
                                     [IMPORTS]

                                     public static final [FACTORY_NAME] INSTANCE = new [FACTORY_NAME]();

                                     /**
                                      * AUTOGENERATED CLASS, do not modify
                                      * <p>
                                      * A factory that can create obtain a constructor for a material by its class.
                                      * This is useful for dependency injection and testing purposes
                                      * </p>
                                      */
                                     public class [FACTORY_NAME]{
                                     
                                         Map<Class<? extends Material>, Function<AssetManager,Material>> materialMap = new HashMap<>();
                                         
                                         {
                                     [INITIALIZATION]
                                         }
                                     
                                         public [FACTORY_NAME]() {
                                             
                                         }
                                     
                                         public Material createMaterial(Class<? extends Material> materialClass, AssetManager assetManager){
                                             return materialMap.get(materialClass).apply(assetManager);
                                         }
                                         
                                         public Function<AssetManager,Material> getMaterialConstructor(Class<? extends Material> materialClass){
                                             return materialMap.get(materialClass);
                                         }
                                     
                                     }""";

    public static String createFactoryClassFile(String packageName, String factoryClassName, List<String> fullyQualifiedMaterialClasses){

        StringBuilder imports = new StringBuilder();
        StringBuilder initialization = new StringBuilder();

        for (String fullyQualifiedMaterialClass : fullyQualifiedMaterialClasses){
            String className = fullyQualifiedMaterialClass.replaceAll(".*\\.", "");
            imports.append("import ").append(fullyQualifiedMaterialClass).append(";\n");
            initialization.append("        materialMap.put(").append(className).append(".class, assetManager -> new ").append(className).append("(assetManager));\n");
        }

        return classTemplate
                .replace("[PACKAGE]", packageName)
                .replace("[FACTORY_NAME]", factoryClassName)
                .replace("[IMPORTS]", imports)
                .replace("[INITIALIZATION]", initialization);
    }
}
